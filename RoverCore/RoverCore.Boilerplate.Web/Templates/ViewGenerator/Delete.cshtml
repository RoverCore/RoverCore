@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
@:@@{
    @:Layout = null;
@:}
}


<dl class="row">
    @{
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
                <dt class="col-sm-2">
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </dt>
                <dd class="col-sm-10">
                    @@Html.DisplayFor(model => model.@GetValueExpression(property))
                </dd>
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
                <dt class="col-sm-2">
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                </dt>
                <dd class="col-sm-10">
                    @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                </dd>
            }
        }
    }
</dl>
    
<form asp-action="@Model.ViewName" id="deleteForm">
    @{
        foreach (var property in Model.ModelMetadata.Properties)
        {
            if (property.IsPrimaryKey)
            {
                @:<input type="hidden" asp-for="@GetValueExpression(property)"/>
            }
        }
    }
</form>


 @functions
{
    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}
