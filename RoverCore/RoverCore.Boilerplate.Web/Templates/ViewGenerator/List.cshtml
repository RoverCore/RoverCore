@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    var container = @Model.ViewName + "_container";
    var recordsAction = $"Get{Model.ModelMetadata.EntitySetName}";
    string pkName = GetPrimaryKeyName();

    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        @:var routeData = ViewContext.RouteData.Values;
        @:var viewController = routeData["controller"].ToString();
        @:var viewArea = routeData.ContainsKey("area") ? routeData["area"].ToString() : "";
        @:                                                                                              
        @:var recordsUrl = Url.Action("@recordsAction");
        @:
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
	
@:<div class="page-header d-print-none mb-2">
	@:<div class="row align-items-center">
		@:<div class="col">
			@:<div class="page-pretitle">
				@:Administration
			@:</div>
			@:<h2 class="page-title">
				@:Manage @(Model.ViewDataTypeShortName)
			@:</h2>
		@:</div>
		@:<div class="col-auto ms-auto d-print-none">
			@:<div class="btn-list">
			@:  
				@:<a asp-action="Create" class="btn btn-primary d-none d-sm-inline-block">
					@:<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
					@:Create new @(Model.ViewDataTypeShortName)
				@:</a>
			@:
			@:</div>
		@:</div>
	@:</div>
@:</div>

@:<div class="card shadow">	
    @:<div class="card-body table-responsive" id="@container">	
        @:<table class="table" id="@Model.ViewName">
        @:<thead>
            @:<tr>
            Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
            Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

            if (pkName != null)
            {
                <th>
                    @@Html.DisplayNameFor(model => model.@pkName)
                </th>
            }

            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
            {
                if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                    && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                </th>
                }
                else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                {
                <th>
                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                </th>
                }
            }
                @:<th>Actions</th>
            @:</tr>
        @:</thead>

    @:</table>
@:    </div>	
@:</div>

    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }

@:@@section Styles {	
    @:<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs4/jszip-2.5.0/dt-1.10.25/af-2.3.7/b-1.7.1/b-html5-1.7.1/b-print-1.7.1/cr-1.5.4/date-1.1.0/r-2.2.9/sl-1.3.3/datatables.min.css" />
    @:<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.7/css/responsive.dataTables.min.css">
@:}	
@:
@:@@section Scripts {	
    @:<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    @:<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    @:<script type="text/javascript" src="https://cdn.datatables.net/v/bs4/jszip-2.5.0/dt-1.10.25/af-2.3.7/b-1.7.1/b-html5-1.7.1/b-print-1.7.1/cr-1.5.4/date-1.1.0/r-2.2.9/sl-1.3.3/datatables.min.js"></script>
    @:<script src="https://cdn.datatables.net/responsive/2.2.7/js/dataTables.responsive.js"></script>
    @:<script type="text/javascript">	
        @:$(document).ready(function () {	
            @:$('[data-toggle="tooltip"]').tooltip();	
                @:var table = $('#@Model.ViewName').DataTable(
                    @:{
                        @:"processing": true,
                        @:"serverSide": true,
                        @:"filter": true,
                        @:"ajax": {
                            @:"url": "@@Url.Action("@recordsAction")",
                            @:"type": "POST",
                            @:"datatype": "json"
                        @:},
                        @:"columnDefs": [
                                @:{
                                    @:"defaultContent": "-", "targets": "_all"
                                @:},
                                @:{
                                @:"targets": [0],
                                @:"visible": false,
                                @:"searchable": false
                            @:}],
                        @:"columns": [
						if (pkName != null)
						{						
						    @:{ "data": "@pkName", "name": "@pkName", "autoWidth": true },
						}
						foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
						{		
							if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
								&& property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)							
								{
							@:{ "data": "@GetValueExpression(property)", "name": "@GetValueExpression(property)", "autoWidth": true },
								}
								else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
								{
							@:{ "data": "@GetValueExpression(navigation)", "name": "@GetValueExpression(navigation)", "autoWidth": true },

								}								
						}
                            @:{
                                @:"render": function(data, type, row) {
                                    @:var controls = "<a href='@@Url.Action("Edit")" + row.id + "' class='btn btn-primary'><i class='las la-wrench'></i> Edit</a> " +
                                        @:"<a href='@@Url.Action("Details")" + row.id + "' class='btn btn-primary'><i class='las la-info-circle'></i> Details</a>";
                                        @:"<a href='@@Url.Action("Delete")" + row.id + "' class='btn btn-primary'><i class='las la-trash'></i> Delete</a>";
									    @:
                                    @:return controls;
                                @:}
                            @:}
						@:],
						@:pageLength: 10,
						@:responsive: true,
						@:order: [[2, "asc"]],
						@:"language": {
							@:"emptyTable": "No records found."
                    @:}
				@:});
            @:table.columns.adjust().draw();	
        @:});	
    @:</script>	
}

}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
