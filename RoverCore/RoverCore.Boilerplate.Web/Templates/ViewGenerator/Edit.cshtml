@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}

    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<div class="page-header d-print-none mb-2">
	@:<div class="row align-items-center">
		@:<div class="col">
			@:<div class="page-pretitle">
				@:@@ViewData["AreaTitle"]
			@:</div>
			@:<h2 class="page-title">
				@:Edit @(Model.ViewDataTypeShortName)
			@:</h2>
		@:</div>
	@:</div>
@:</div>
@:<div class="card shadow mb-5">
    @:<div class="card-body">
        @:<div class="row">
            @:<div class="col-md-4">
                @:<form asp-action="@Model.ViewName">
                    @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
                foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
                {
                    if (property.IsPrimaryKey)
                    {
                    @:<input type="hidden" asp-for="@property.PropertyName" />
                        continue;
                    }

                    if (property.Scaffold)
                    {
                        if (property.IsReadOnly)
                        {
                            continue;
                        }

                        if (property.IsForeignKey)
                        {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                            continue;
                        }

                        bool isCheckbox = property.TypeName.Equals("System.Boolean");
                        if (isCheckbox)
                        {
                    @:<div class="form-group form-check pl-0">
                        @:<div class="checkbox-custom checkbox-default">
                            @:<input class="form-check-input" asp-for="@property.PropertyName" />
                            @:<label class="form-check-label">
                            @: @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                            @:</label>
                        @:</div>
                    @:</div>
                        }
                        else if (property.IsEnum && !property.IsEnumFlags)
                        {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<select asp-for="@property.PropertyName" class="form-control"></select>
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                        }
                        else if (property.IsMultilineText)
                        {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<textarea asp-for="@property.PropertyName" class="form-control"></textarea>
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                        }
                        else
                        {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<input asp-for="@property.PropertyName" class="form-control" />
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                        }
                    }
                    // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
                    else if (property.IsForeignKey)
                    {
                @:<input type="hidden" asp-for="@property.PropertyName" />
                        continue;
                    }
                }
            }
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>

    </div>
</div>

<div>
    <a asp-action="Index" class="btn btn-default mt-4">Back to List</a>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
